#!/bin/bash

# Script usage function
usage() {
    echo "Usage: $0 -p <hdfs_path> -d <date_format:YYYYMMDD> [-u <hdfs_user>] [-h <hdfs_host>] [-l <local_dir>]"
    echo "Example: $0 -p /data/myfiles -d 20240301 -u hdfs_user"
    exit 1
}

# Default values
HDFS_NAMENODE="default-namenode:50070"
HDFS_USER="hdfs_user"
LOCAL_DIR="/tmp/hdfs_downloads"
DATE_FORMAT=""
HDFS_BASE_PATH=""

# Parse command line arguments
while getopts "p:d:u:h:l:" opt; do
    case $opt in
        p) HDFS_BASE_PATH="$OPTARG";;
        d) DATE_FORMAT="$OPTARG";;
        u) HDFS_USER="$OPTARG";;
        h) HDFS_NAMENODE="$OPTARG";;
        l) LOCAL_DIR="$OPTARG";;
        ?) usage;;
    esac
done

# Validate required parameters
if [ -z "$HDFS_BASE_PATH" ] || [ -z "$DATE_FORMAT" ]; then
    echo "ERROR: Missing required parameters"
    usage
fi

# Validate date format
if ! [[ $DATE_FORMAT =~ ^[0-9]{8}$ ]]; then
    echo "ERROR: Invalid date format. Please use YYYYMMDD"
    exit 1
fi

# Extract date components
YEAR=${DATE_FORMAT:0:4}
MONTH=${DATE_FORMAT:4:2}
DAY=${DATE_FORMAT:6:2}

# Configure paths and logging
HDFS_PATH="${HDFS_BASE_PATH}/${YEAR}/${MONTH}/${DAY}"
LOCAL_DIR="${LOCAL_DIR}/${YEAR}/${MONTH}/${DAY}"
LOG_DIR="/var/log/hdfs_downloads"
LOG_FILE="${LOG_DIR}/webhdfs_download_${DATE_FORMAT}.log"

# Create necessary directories
mkdir -p ${LOCAL_DIR}
mkdir -p ${LOG_DIR}

# Source credentials (stored securely)
CREDS_FILE="/path/to/.hdfs_creds"
if [ -f "$CREDS_FILE" ]; then
    source "$CREDS_FILE"
else
    echo "ERROR: Credentials file not found at $CREDS_FILE"
    exit 1
fi

# Function to log messages
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $LOG_FILE
}

# Function to make WebHDFS REST calls
call_webhdfs() {
    local operation=$1
    local path=$2
    local url="http://${HDFS_NAMENODE}/webhdfs/v1${path}?op=${operation}&user.name=${HDFS_USER}"
    
    curl -s -L --negotiate -u : "${url}"
}

# Function to download a file using WebHDFS
download_file() {
    local hdfs_path=$1
    local file_name=$(basename "$hdfs_path")
    local local_path="${LOCAL_DIR}/${file_name}"
    local download_url="http://${HDFS_NAMENODE}/webhdfs/v1${hdfs_path}?op=OPEN&user.name=${HDFS_USER}"
    
    log_message "Downloading: ${file_name}"
    
    # Create local directory structure if it doesn't exist
    mkdir -p $(dirname "$local_path")
    
    if [ -f "${local_path}" ]; then
        log_message "File already exists locally: ${file_name}"
        return
    }
    
    # Download the file
    curl -s -L --negotiate -u : "${download_url}" -o "${local_path}"
    
    if [ $? -eq 0 ] && [ -s "${local_path}" ]; then
        log_message "Successfully downloaded: ${file_name}"
        return 0
    else
        log_message "ERROR: Failed to download: ${file_name}"
        return 1
    fi
}

# Main execution
log_message "Starting WebHDFS file download process for date: ${DATE_FORMAT}"
log_message "HDFS Path: ${HDFS_PATH}"
log_message "Local Directory: ${LOCAL_DIR}"

# Check if HDFS path exists
path_check=$(call_webhdfs "LISTSTATUS" "${HDFS_PATH}")
if [[ $path_check == *"FileNotFoundException"* ]]; then
    log_message "ERROR: HDFS path does not exist: ${HDFS_PATH}"
    exit 1
fi

# Get list of files from HDFS directory
log_message "Fetching file list from: ${HDFS_PATH}"

file_list=$(call_webhdfs "LISTSTATUS" "${HDFS_PATH}" | \
    jq -r '.FileStatuses.FileStatus[] | select(.type=="FILE") | .pathSuffix')

if [ -z "$file_list" ]; then
    log_message "No files found in HDFS directory for date ${DATE_FORMAT}"
    exit 0
fi

# Count total files
total_files=$(echo "$file_list" | wc -l)
log_message "Found ${total_files} files to process"

# Initialize counters
successful_downloads=0
failed_downloads=0

# Download each file
while IFS= read -r file_name; do
    if download_file "${HDFS_PATH}/${file_name}"; then
        ((successful_downloads++))
    else
        ((failed_downloads++))
    fi
    sleep 2
done <<< "$file_list"

# Summary
log_message "Download process completed"
log_message "Summary:"
log_message "  - Total files: ${total_files}"
log_message "  - Successfully downloaded: ${successful_downloads}"
log_message "  - Failed downloads: ${failed_downloads}"

# Exit with error if any downloads failed
if [ $failed_downloads -gt 0 ]; then
    exit 1
fi

exit 0
