#!/bin/bash

# Script to download files from HDFS through Knox Gateway with concurrent execution support
# Usage: ./knox_hdfs_download.sh <app_name> <base_path1,base_path2,...> [date]

set -e

# Configuration
KNOX_HOST="web:9443"
KNOX_BASE_PATH="/gateway/cdp-proxy-api/webhdfs/v1"
OUTPUT_DIR="/opt/splunk/data"
LOG_DIR="/var/log/hdfs_downloads"
LOG_RETENTION_DAYS=7
DATA_RETENTION_DAYS=30

SPLUNK_USER="splunk"
SPLUNK_GROUP="splunk"

KNOX_USER="your_username_here"
KNOX_PASSWORD="your_password_here"

PROCESS_ID="$$_$(date +%s%N)"
LOCK_DIR="/var/lock/hdfs_downloads"
mkdir -p "$LOCK_DIR"
chown ${SPLUNK_USER}:${SPLUNK_GROUP} "$LOCK_DIR"

# Function to validate date format
validate_date() {
    local date_str="$1"
    if [[ ! "$date_str" =~ ^[0-9]{8}$ ]]; then
        log_message "ERROR" "Invalid date format. Expected YYYYMMDD" "\"date\":\"${date_str}\""
        return 1
    fi
    return 0
}

# Modified download_file function to handle different path structures
download_file() {
    local file_path="$1"
    local base_path="$2"
    local filename=$(basename "$file_path")
    
    local final_dir
    if [ -z "$DATE_PATH" ]; then
        final_dir="${LOCAL_BASE_DIR}/$(basename "$base_path")_files"
    else
        final_dir="${LOCAL_BASE_DIR}/${DATE_PATH}/$(basename "$base_path")_files"
    fi
    
    mkdir -p "$final_dir"
    chown ${SPLUNK_USER}:${SPLUNK_GROUP} "$final_dir"
    
    local temp_file="${TEMP_DIR}/${filename}"
    local final_file="${final_dir}/${filename}"
    
    # Skip if file exists
    if [ -f "$final_file" ]; then
        log_message "INFO" "File already exists" "\"file\":\"${filename}\",\"path\":\"${base_path}\",\"status\":\"skipped\""
        return 0
    fi
    
    local file_size=$(get_file_size "$file_path")
    local formatted_size=$(format_size "$file_size")
    
    log_message "INFO" "Starting download" "\"file\":\"${filename}\",\"path\":\"${base_path}\",\"size\":\"${formatted_size}\""
    
    local start_time=$(date +%s)
    
    curl -s -k -L -o "$temp_file" \
        -u "${KNOX_USER}:${KNOX_PASSWORD}" \
        "https://${KNOX_HOST}${KNOX_BASE_PATH}${file_path}?op=OPEN"
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    if [ $? -ne 0 ] || [ ! -s "$temp_file" ]; then
        log_message "ERROR" "Download failed" "\"file\":\"${filename}\",\"path\":\"${base_path}\""
        rm -f "$temp_file"
        return 1
    fi
    
    chown ${SPLUNK_USER}:${SPLUNK_GROUP} "$temp_file"
    chmod 644 "$temp_file"
    
    if move_to_final_location "$temp_file" "$final_file"; then
        log_message "INFO" "Download completed" "\"file\":\"${filename}\",\"path\":\"${base_path}\",\"duration_seconds\":${duration}"
        return 0
    else
        log_message "ERROR" "Failed to move file" "\"file\":\"${filename}\",\"path\":\"${base_path}\""
        rm -f "$temp_file"
        return 1
    fi
}

# Modified main function to handle multiple paths
main() {
    log_message "INFO" "Starting HDFS download process" "\"paths\":\"${BASE_PATHS}\""
    
    local total_success=0
    local total_files=0
    
    IFS=',' read -ra PATHS <<< "$BASE_PATHS"
    for base_path in "${PATHS[@]}"; do
        local hdfs_path
        if [ -z "$DATE_PATH" ]; then
            hdfs_path="${base_path}"
        else
            hdfs_path="${base_path}/${DATE_PATH}"
        fi
        
        log_message "INFO" "Processing path" "\"path\":\"${hdfs_path}\""
        
        local files_list=$(curl -s -k -L \
            -u "${KNOX_USER}:${KNOX_PASSWORD}" \
            "https://${KNOX_HOST}${KNOX_BASE_PATH}${hdfs_path}?op=LISTSTATUS" | \
            grep -o '"pathSuffix":"[^"]*"' | cut -d'"' -f4)
        
        if [ -z "$files_list" ]; then
            log_message "ERROR" "No files found" "\"path\":\"${hdfs_path}\""
            continue
        fi
        
        while IFS= read -r file; do
            if [ ! -z "$file" ]; then
                total_files=$((total_files + 1))
                if download_file "${hdfs_path}/${file}" "${base_path}"; then
                    total_success=$((total_success + 1))
                fi
            fi
        done <<< "$files_list"
    done
    
    log_message "INFO" "Process completed" "\"total_files\":${total_files},\"successful\":${total_success}"
    
    if [ $total_success -ne $total_files ]; then
        log_message "ERROR" "Some downloads failed" "\"failed\":$((total_files - total_success))"
        exit 1
    fi
}

# Parse input parameters
if [ $# -lt 2 ]; then
    echo "Usage: $0 <app_name> <base_path1,base_path2,...> [date]"
    exit 1
fi

APP_NAME="$1"
BASE_PATHS="$2"
DATE_PATH="${3:-}"

if [ ! -z "$DATE_PATH" ] && ! validate_date "$DATE_PATH"; then
    exit 1
fi

setup_logging "$APP_NAME" "${DATE_PATH:-nodate}"

LOCAL_BASE_DIR="${OUTPUT_DIR}/${APP_NAME}"
TEMP_DIR="${OUTPUT_DIR}/${APP_NAME}/temp/${PROCESS_ID}"
mkdir -p "$TEMP_DIR"
chown -R ${SPLUNK_USER}:${SPLUNK_GROUP} "$TEMP_DIR"

trap cleanup EXIT
main
